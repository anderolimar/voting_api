// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients/pubsub/pubsub.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	pubsub "votingapi/clients/pubsub"

	gomock "github.com/golang/mock/gomock"
)

// MockPubSubClient is a mock of PubSubClient interface.
type MockPubSubClient struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubClientMockRecorder
}

// MockPubSubClientMockRecorder is the mock recorder for MockPubSubClient.
type MockPubSubClientMockRecorder struct {
	mock *MockPubSubClient
}

// NewMockPubSubClient creates a new mock instance.
func NewMockPubSubClient(ctrl *gomock.Controller) *MockPubSubClient {
	mock := &MockPubSubClient{ctrl: ctrl}
	mock.recorder = &MockPubSubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubClient) EXPECT() *MockPubSubClientMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPubSubClient) Publish(ctx context.Context, channel string, message *pubsub.PubSubMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, channel, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubClientMockRecorder) Publish(ctx, channel, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSubClient)(nil).Publish), ctx, channel, message)
}

// Subscribe mocks base method.
func (m *MockPubSubClient) Subscribe(ctx context.Context, channel string) pubsub.ChannelContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, channel)
	ret0, _ := ret[0].(pubsub.ChannelContainer)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubSubClientMockRecorder) Subscribe(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSubClient)(nil).Subscribe), ctx, channel)
}

// MockChannelContainer is a mock of ChannelContainer interface.
type MockChannelContainer struct {
	ctrl     *gomock.Controller
	recorder *MockChannelContainerMockRecorder
}

// MockChannelContainerMockRecorder is the mock recorder for MockChannelContainer.
type MockChannelContainerMockRecorder struct {
	mock *MockChannelContainer
}

// NewMockChannelContainer creates a new mock instance.
func NewMockChannelContainer(ctrl *gomock.Controller) *MockChannelContainer {
	mock := &MockChannelContainer{ctrl: ctrl}
	mock.recorder = &MockChannelContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelContainer) EXPECT() *MockChannelContainerMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockChannelContainer) Channel() *pubsub.PubSubChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(*pubsub.PubSubChannel)
	return ret0
}

// Channel indicates an expected call of Channel.
func (mr *MockChannelContainerMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockChannelContainer)(nil).Channel))
}

// Close mocks base method.
func (m *MockChannelContainer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockChannelContainerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChannelContainer)(nil).Close))
}

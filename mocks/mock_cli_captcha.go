// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients/captcha/captcha.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCaptchaClient is a mock of CaptchaClient interface.
type MockCaptchaClient struct {
	ctrl     *gomock.Controller
	recorder *MockCaptchaClientMockRecorder
}

// MockCaptchaClientMockRecorder is the mock recorder for MockCaptchaClient.
type MockCaptchaClientMockRecorder struct {
	mock *MockCaptchaClient
}

// NewMockCaptchaClient creates a new mock instance.
func NewMockCaptchaClient(ctrl *gomock.Controller) *MockCaptchaClient {
	mock := &MockCaptchaClient{ctrl: ctrl}
	mock.recorder = &MockCaptchaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptchaClient) EXPECT() *MockCaptchaClientMockRecorder {
	return m.recorder
}

// GenerateCaptcha mocks base method.
func (m *MockCaptchaClient) GenerateCaptcha() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCaptcha")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateCaptcha indicates an expected call of GenerateCaptcha.
func (mr *MockCaptchaClientMockRecorder) GenerateCaptcha() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCaptcha", reflect.TypeOf((*MockCaptchaClient)(nil).GenerateCaptcha))
}

// ValidateCaptcha mocks base method.
func (m *MockCaptchaClient) ValidateCaptcha(captchaID, captchaValue string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCaptcha", captchaID, captchaValue)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateCaptcha indicates an expected call of ValidateCaptcha.
func (mr *MockCaptchaClientMockRecorder) ValidateCaptcha(captchaID, captchaValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCaptcha", reflect.TypeOf((*MockCaptchaClient)(nil).ValidateCaptcha), captchaID, captchaValue)
}

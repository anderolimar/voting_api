// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositories/poll.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"
	models "votingapi/models"

	gomock "github.com/golang/mock/gomock"
)

// MockPollRepository is a mock of PollRepository interface.
type MockPollRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPollRepositoryMockRecorder
}

// MockPollRepositoryMockRecorder is the mock recorder for MockPollRepository.
type MockPollRepositoryMockRecorder struct {
	mock *MockPollRepository
}

// NewMockPollRepository creates a new mock instance.
func NewMockPollRepository(ctrl *gomock.Controller) *MockPollRepository {
	mock := &MockPollRepository{ctrl: ctrl}
	mock.recorder = &MockPollRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollRepository) EXPECT() *MockPollRepositoryMockRecorder {
	return m.recorder
}

// AddPoll mocks base method.
func (m *MockPollRepository) AddPoll(ctx context.Context, poll *models.Poll, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPoll", ctx, poll, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPoll indicates an expected call of AddPoll.
func (mr *MockPollRepositoryMockRecorder) AddPoll(ctx, poll, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoll", reflect.TypeOf((*MockPollRepository)(nil).AddPoll), ctx, poll, duration)
}

// AddVote mocks base method.
func (m *MockPollRepository) AddVote(ctx context.Context, pollID string, voteIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVote", ctx, pollID, voteIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVote indicates an expected call of AddVote.
func (mr *MockPollRepositoryMockRecorder) AddVote(ctx, pollID, voteIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVote", reflect.TypeOf((*MockPollRepository)(nil).AddVote), ctx, pollID, voteIndex)
}

// GetParcial mocks base method.
func (m *MockPollRepository) GetParcial(ctx context.Context, pollID string) (*models.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParcial", ctx, pollID)
	ret0, _ := ret[0].(*models.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParcial indicates an expected call of GetParcial.
func (mr *MockPollRepositoryMockRecorder) GetParcial(ctx, pollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParcial", reflect.TypeOf((*MockPollRepository)(nil).GetParcial), ctx, pollID)
}

// GetPoll mocks base method.
func (m *MockPollRepository) GetPoll(ctx context.Context) (*models.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoll", ctx)
	ret0, _ := ret[0].(*models.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoll indicates an expected call of GetPoll.
func (mr *MockPollRepositoryMockRecorder) GetPoll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoll", reflect.TypeOf((*MockPollRepository)(nil).GetPoll), ctx)
}

// UpdateVote mocks base method.
func (m *MockPollRepository) UpdateVote(ctx context.Context, pollID string, voteIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVote", ctx, pollID, voteIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVote indicates an expected call of UpdateVote.
func (mr *MockPollRepositoryMockRecorder) UpdateVote(ctx, pollID, voteIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVote", reflect.TypeOf((*MockPollRepository)(nil).UpdateVote), ctx, pollID, voteIndex)
}
